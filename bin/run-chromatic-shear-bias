#!/usr/bin/env python
"""
Staging file for generating simulations and running metadetect
"""

import argparse
import copy
import logging
import os
import shutil
from pathlib import Path

# from mpi4py import MPI
import numpy as np
import pandas as pd
import pyarrow as pa
import pyarrow.dataset as ds
import pyarrow.parquet as pq
import yaml

import fitsio
import galsim
import ngmix
import metadetect

from chromatic_shear_bias import run_utils


# comm = MPI.COMM_WORLD
# rank = comm.Get_rank()
# size = comm.Get_size()


def clean_config(config, keep_current=False):
    """We're just duplicating galsim.config.CleanConfig
    without discarding _input_objs
    """
    if isinstance(config, dict):
        return {
            k: clean_config(config[k], keep_current) for k in config
            if (k[0] != "_" and (keep_current or k != "current"))
            or k == "_input_objs"
        }
    elif isinstance(config, list):
        return [ clean_config(item, keep_current) for item in config ]
    else:
        return config


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--config",
        type=str,
        required=True,
        help="Metadetection configuration file [yaml]",
    )
    parser.add_argument(
        "--sim",
        type=str,
        required=True,
        help="GalSim configuration file [yaml]",
    )
    parser.add_argument(
        "--seed",
        type=int,
        required=False,
        default=1,
        help="RNG seed [int]",
    )
    parser.add_argument(
        "--n_sims",
        type=int,
        required=False,
        default=1,
        help="Number of sims to run [int]",
    )
    parser.add_argument("--output", type=str, required=True, help="Output directory")
    return parser.parse_args()


def get_logger():
    """
    Format logger.
    """
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)
    ch = logging.StreamHandler()
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    return logger


def main():
    """
    Run the simulation and measurement for metadetect noise bias cancellation.
    """
    args = get_args()
    logger = get_logger()

    # Setup the seed for each rank
    seed = args.seed # + rank

    # output file path
    root_path = Path(args.output)
    # if root_path.exists() and not root_path.is_dir():
    #     raise RuntimeError(f"{root_path} exists but is not a directory!")
    if not root_path.exists():
        root_path.mkdir(exist_ok=True)
    path = root_path / f"{seed}.parquet"

    _config = None
    _galsim_config = None
    # if rank == 0:
    logger.info(f"Running: {vars(args)}")
    # logger.info(f"Running with {size} MPI processes")

    with open(args.config, "r") as fp:
        _config = yaml.safe_load(fp.read())

    galsim_configs = galsim.config.ReadConfig(args.sim)
    assert len(galsim_configs) == 1, f"Expected 1 GalSim config in {args.sim}; found {len(galsim_configs)}"
    _galsim_config = galsim_configs[0]

    # Broadcast configs from rank 0 process
    # config = comm.bcast(_config, root=0)
    # galsim_config = comm.bcast(_galsim_config, root=0)
    config = copy.deepcopy(_config)
    galsim_config = copy.deepcopy(_galsim_config)

    # logger.info(f"Processing inputs in GalSim config")
    # galsim.config.ProcessInput(_galsim_config)  # TODO Is this the best place to call this?

    # Initialize the parquet writers for subsequent writes
    schema = run_utils._get_schema()
    pqwriter = pq.ParquetWriter(path, schema)

    rng = np.random.default_rng(seed)
    for index in range(args.n_sims):
        seed = rng.integers(1, 2**64 // 2)
        # logger.info(f"Running with seed {seed}")
        meas = run_utils.make_and_measure_pairs(
            config,
            galsim_config,
            seed,
            index,
            logger,
        )

        table = pa.Table.from_pandas(
            pd.DataFrame(np.array(meas, dtype=run_utils._get_dtype())),
            schema,
        )

        pqwriter.write_table(table)

        # # Track progress over all ranks
        # progress = comm.reduce(index)
        # if (rank == 0) and (progress > 0) and (progress % 10 == 0):
        #     logger.info(f"Proccessed {progress} paired image simulations")
        if (index > 0) and (index % 10 == 0):
            logger.info(f"Proccessed {index + 1} paired image simulations")

        # Clean the config for the next simulation
        galsim_config = clean_config(galsim_config)
        # galsim_config = galsim.config.CleanConfig(galsim_config)  # TODO we want to keep _input_objs


        # Periodically measure bias on rank 0
        # if (rank == 0) and (progress is not None) and (progress > 0) and (progress % 100 == 0):
        #     calibration_shear = ngmix.metacal.DEFAULT_STEP
        #     with fitsio.FITS(path, "r") as fits:
        #         pdata = fits["plus"].read()
        #         mdata = fits["minus"].read()
        #     pmsk = (pdata["s2n_cut"] == 10)
        #     pmsk &= (pdata["ormask_cut"] == -1)
        #     pmsk &= (pdata["mfrac_cut"] == 100)
        #     n_sims_msk = np.sum(pdata["weight"][pmsk])
        #     if n_sims_msk <= 0:
        #         logger.info(f"No sims pass measurement cuts")
        #     else:
        #         m_est, m_std, c_est, c_std = estimate_biases(
        #             pdata[pmsk], mdata[pmsk], calibration_shear, cosmic_shear,
        #             weights=pdata["weight"][pmsk],
        #             method="bootstrap",
        #             n_resample=100,
        #         )
        #         logger.info(f"multiplicative bias: {m_est:.3e} +/- {m_std*3:.3e} (3 sigma) [s2n_cut = 10, ormask_cut = -1, mfrac_cut = 100, n_sims = {n_sims_msk}]")
        #         logger.info(f"additive bias: {c_est:.3e} +/- {c_std*3:.3e} (3 sigma) [s2n_cut = 10, ormask_cut = -1, mfrac_cut = 100, n_sims = {n_sims_msk}]")


    # Close connection from writers to parquet files
    pqwriter.close()

    # logger.info(f"MPI -- Finished rank {rank}")


if __name__ == "__main__":
    main()

