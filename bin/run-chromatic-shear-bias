#!/usr/bin/env python
"""
Staging file for generating simulations and running metadetect
"""

import argparse
import copy
import logging
import os
import shutil
from pathlib import Path

import yaml
import numpy as np
from mpi4py import MPI

import fitsio
import galsim
import ngmix
import metadetect

from chromatic_shear_bias import run_utils


comm = MPI.COMM_WORLD
rank = comm.Get_rank()
size = comm.Get_size()


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--config",
        type=str,
        required=True,
        help="Metadetection configuration file [yaml]",
    )
    parser.add_argument(
        "--sim",
        type=str,
        required=True,
        help="GalSim configuration file [yaml]",
    )
    parser.add_argument(
        "--seed",
        type=int,
        required=False,
        default=1,
        help="RNG seed [int]",
    )
    parser.add_argument(
        "--n_sims",
        type=int,
        required=False,
        default=1,
        help="Number of sims to run [int]",
    )
    parser.add_argument("--output", type=str, required=True, help="Output file [fits]")
    return parser.parse_args()


def get_logger():
    """
    Format logger.
    """
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)
    ch = logging.StreamHandler()
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    return logger


def main():
    """
    Run the simulation and measurement for metadetect noise bias cancellation.
    """
    args = get_args()
    logger = get_logger()

    # output file path
    root_path = Path(args.output)
    path = root_path.with_stem(f"{root_path.stem}-{rank}").with_suffix(".fits")

    _config = None
    _galsim_config = None
    if rank == 0:
        logger.info(f"Running: {vars(args)}")
        logger.info(f"Running with {size} MPI processes")

        with open(args.config, "r") as fp:
            _config = yaml.safe_load(fp.read())

        galsim_configs = galsim.config.ReadConfig(args.sim)
        assert len(galsim_configs) == 1, f"Expected 1 GalSim config in {args.sim}; found {len(galsim_configs)}"
        _galsim_config = galsim_configs[0]

    # Broadcast configs from rank 0 process
    config = comm.bcast(_config, root=0)
    galsim_config = comm.bcast(_galsim_config, root=0)

    rng = np.random.default_rng(args.seed + rank)

    measurement_array = np.zeros(
        shape=(run_utils._get_size(args.n_sims), 2),
        dtype=run_utils._get_dtype(),
    )

    for kwargs in run_utils.generate_arguments(
        config, galsim_config, rng, args.n_sims, logger,
    ):
        measurements = run_utils.make_and_measure_pairs(**kwargs)
        idx_start = kwargs["idx"] * run_utils._get_size(1)
        idx_stop = (kwargs["idx"] + 1) * run_utils._get_size(1)
        measurement_array[idx_start:idx_stop] = measurements

        # TODO clobber overwrites, doesn't append!!! TODO TODO TODO
        # logger.info(f"Writing output to {path}")
        with fitsio.FITS(path, "rw", clobber=True) as fits:
            fits.write(measurement_array[:, 0], extname="plus")
            fits.write(measurement_array[:, 1], extname="minus")

        # Track progress over all ranks
        progress = comm.reduce(kwargs["idx"])
        if (rank == 0) and (progress > 0) and (progress % 10 == 0):
            logger.info(f"Proccessed {progress} paired image simulations")

        # Periodically measure bias on rank 0
        # if (rank == 0) and (progress is not None) and (progress > 0) and (progress % 100 == 0):
        #     calibration_shear = ngmix.metacal.DEFAULT_STEP
        #     with fitsio.FITS(path, "r") as fits:
        #         pdata = fits["plus"].read()
        #         mdata = fits["minus"].read()
        #     pmsk = (pdata["s2n_cut"] == 10)
        #     pmsk &= (pdata["ormask_cut"] == -1)
        #     pmsk &= (pdata["mfrac_cut"] == 100)
        #     n_sims_msk = np.sum(pdata["weight"][pmsk])
        #     if n_sims_msk <= 0:
        #         logger.info(f"No sims pass measurement cuts")
        #     else:
        #         m_est, m_std, c_est, c_std = estimate_biases(
        #             pdata[pmsk], mdata[pmsk], calibration_shear, cosmic_shear,
        #             weights=pdata["weight"][pmsk],
        #             method="bootstrap",
        #             n_resample=100,
        #         )
        #         logger.info(f"multiplicative bias: {m_est:.3e} +/- {m_std*3:.3e} (3 sigma) [s2n_cut = 10, ormask_cut = -1, mfrac_cut = 100, n_sims = {n_sims_msk}]")
        #         logger.info(f"additive bias: {c_est:.3e} +/- {c_std*3:.3e} (3 sigma) [s2n_cut = 10, ormask_cut = -1, mfrac_cut = 100, n_sims = {n_sims_msk}]")

    logger.info(f"MPI -- Finished rank {rank} of {size - 1}")


if __name__ == "__main__":
    main()

