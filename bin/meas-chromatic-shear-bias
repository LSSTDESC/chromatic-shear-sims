#!/usr/bin/env python
"""
Staging file for generating simulations and running metadetect
"""

import argparse
import copy
import logging
from pathlib import Path

import yaml
import numpy as np
import pyarrow as pa
import pyarrow.compute as pc
import pyarrow.dataset as ds
import pyarrow.parquet as pq

import galsim
import ngmix
import metadetect

from chromatic_shear_bias import run_utils


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--config",
        type=str,
        required=True,
        help="Metadetection configuration file [yaml]",
    )
    parser.add_argument(
        "--s2n-cut", type=int, default=10,
    )
    # parser.add_argument(
    #     "--jackknife", type=int, default=None,
    #     help="number of jackknife subsets to use",
    # )
    parser.add_argument(
        "--ormask-cut", type=int, default=None,
        help="Cut to make on ormask. 0 indicates make a cut, 1 indicates no cut.",
    )
    parser.add_argument(
        "--mfrac-cut", type=int, default=None,
        help="Cut to make on mfrac. Given in percentages and comma separated. Cut keeps all objects less than the given value.",
    )
    parser.add_argument("--output", type=str, required=True, help="Output directory")
    parser.add_argument("--method", type=str, required=False, default="bootstrap", help="Method for calculating variance [bootstrap, jackknife]")
    parser.add_argument("--n_resample", type=int, required=False, default=1000, help="Number of resample iterations")
    return parser.parse_args()


def get_logger():
    """
    Format logger.
    """
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)
    ch = logging.StreamHandler()
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    return logger


def main():
    """
    Run the simulation and measurement for metadetect noise bias cancellation.
    """
    args = get_args()
    logger = get_logger()

    with open(args.config, "r") as fp:
        config = yaml.safe_load(fp.read())

    # copy the config for safekeeping
    _config = copy.deepcopy(config)

    logger.info(f"Measuring: {vars(args)}")

    logger.info(f"Reading output files")
    dataset = ds.dataset(args.output)

    predicate = \
        pc.field("s2n_cut") == args.s2n_cut
    if args.ormask_cut is not None:
        predicate &= (pc.field("ormask_cut") == args.ormask_cut)
    else:
        predicate &= (pc.field("ormask_cut") == -1)
    if args.mfrac_cut is not None:
        predicate &= (pc.field("mfrac_cut") == args.mfrac_cut)
    else:
        predicate &= (pc.field("mfrac_cut") == -1)

    data = dataset.to_table(filter=predicate).to_pydict()
    n_sims_msk = np.sum(data["weight"])
    if n_sims_msk <= 0:
        raise RuntimeError("Cuts did not keep any sims!")
    else:
        logger.info(f"{n_sims_msk} sims pass cuts")

    logger.info(f"Measuring multiplicative and additive biases")
    m_req = 0.002
    calibration_shear = ngmix.metacal.DEFAULT_STEP
    cosmic_shear = config["shear"]["g"]
    m_est, m_std, c_est, c_std = run_utils.estimate_biases(
        data, calibration_shear, cosmic_shear,
        weights=data["weight"],
        method=args.method,
        n_resample=args.n_resample,
    )

    # logger.info(f"Applying cuts")
    # pmsk = (pdata["s2n_cut"] == args.s2n_cut)
    # if args.ormask_cut is not None:
    #     pmsk &= (pdata["ormask_cut"] == args.ormask_cut)
    # else:
    #     pmsk &= (pdata["ormask_cut"] == -1)
    # if args.mfrac_cut is not None:
    #     pmsk &= (pdata["mfrac_cut"] == args.mfrac_cut)
    # else:
    #     pmsk &= (pdata["mfrac_cut"] == -1)

    # n_sims_msk = np.sum(pdata["weight"][pmsk])
    # if n_sims_msk <= 0:
    #     raise RuntimeError("Cuts did not keep any sims!")
    # else:
    #     logger.info(f"{n_sims_msk} sims pass cuts")

    # logger.info(f"Measuring multiplicative and additive biases")
    # m_req = 0.002
    # calibration_shear = ngmix.metacal.DEFAULT_STEP
    # cosmic_shear = config["shear"]["g"]
    # m_est, m_std, c_est, c_std = run_utils.estimate_biases(
    #     pdata[pmsk], mdata[pmsk], calibration_shear, cosmic_shear,
    #     weights=pdata["weight"][pmsk],
    #     method=args.method,
    #     n_resample=args.n_resample,
    # )

    logger.info(f"multiplicative bias: {m_est:.3e} +/- {m_std*3:.3e} (3 sigma)")
    logger.info(f"additive bias: {c_est:.3e} +/- {c_std*3:.3e} (3 sigma)")

    if np.abs(m_est) < np.abs(m_std * 3):
        logger.info(f"unreliable measurement (3-sigma uncertainty > mean measurement)")
    else:
        logger.info(f"reliable measurement (3-sigma uncertainty < mean measurement)")

    if np.abs(m_est) < 0.002:
        logger.info(f"mean multiplicative bias within nominal requirement. ({np.abs(m_est):.3e} < {m_req:.3e})")
    else:
        logger.info(f"mean multiplicative bias exceeds nominal requirement! ({np.abs(m_est):.3e} > {m_req:.3e})")


if __name__ == "__main__":
    main()
