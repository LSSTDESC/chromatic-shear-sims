#!/usr/bin/env python

import argparse
import logging
import os

import ngmix
import numpy as np
import matplotlib.pyplot as plt
import joblib
import pyarrow as pa
import pyarrow.compute as pc
import pyarrow.dataset as ds
import pyarrow.feather as ft
import pyarrow.parquet as pq
from pyarrow import acero
import tqdm

from chromatic_shear_bias import logging_config
from chromatic_shear_bias.pipeline import Pipeline
# from chromatic_shear_bias import meas


logger = logging.getLogger(__name__)


CHROMATIC_MEASURES = {
    "chromatic_metadetect",
    "drdc",
}


def compute_e_step(results, shear_step, color_step):
    e1 = np.average(results[shear_step][color_step]["noshear"]["g1"])
    e2 = np.average(results[shear_step][color_step]["noshear"]["g2"])

    return np.array([e1, e2])


def compute_R_step(results, dg, shear_step, color_step):
    R11 = np.average(pc.divide(pc.subtract(
        results[shear_step][color_step]["1p"]["g1"],
        results[shear_step][color_step]["1m"]["g1"]
    ), 2 * dg))
    R12 = np.average(pc.divide(pc.subtract(
        results[shear_step][color_step]["2p"]["g1"],
        results[shear_step][color_step]["2m"]["g1"]
    ), 2 * dg))
    R21 = np.average(pc.divide(pc.subtract(
        results[shear_step][color_step]["1p"]["g2"],
        results[shear_step][color_step]["1m"]["g2"]
    ), 2 * dg))
    R22 = np.average(pc.divide(pc.subtract(
        results[shear_step][color_step]["2p"]["g2"],
        results[shear_step][color_step]["2m"]["g2"]
    ), 2 * dg))

    return np.array([[R11, R12], [R21, R22]])


def compute_e_all(results):
    es = {}
    for shear_step in ["plus", "minus"]:
        es[shear_step] = {}
        for color_step in ["c0", "c1", "c2"]:
            es[shear_step][color_step] = compute_e_step(results, shear_step, color_step)

    return es


def compute_R_all(results, dg):
    Rs = {}
    for shear_step in ["plus", "minus"]:
        Rs[shear_step] = {}
        for color_step in ["c0", "c1", "c2"]:
            Rs[shear_step][color_step] = compute_R_step(results, dg, shear_step, color_step)

    return Rs


def compute_g_all(es, Rs):
    gs = {}
    for shear_step in ["plus", "minus"]:
        gs[shear_step] = {}
        for color_step in ["c0", "c1", "c2"]:
            gs[shear_step][color_step] = np.linalg.inv(Rs[shear_step][color_step]) @ es[shear_step][color_step]

    return Rs


def compute_all(results, dg):

    es = compute_e_all(results)
    Rs = compute_R_all(results, dg)

    return es, Rs


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--config",
        type=str,
        required=True,
        help="configuration file [yaml]",
    )
    parser.add_argument(
        "--seed",
        type=int,
        required=False,
        default=None,
        help="RNG seed [int]",
    )
    parser.add_argument(
        "--output",
        type=str,
        required=True,
        help="Output directory"
    )
    parser.add_argument(
        "--n_resample",
        type=int,
        required=False,
        default=1000,
        help="Number of resample iterations"
    )
    parser.add_argument(
        "--n_jobs",
        type=int,
        required=False,
        default=1,
        help="Number of jobs to run [int; 1]",
    )
    parser.add_argument(
        "--log_level",
        type=int,
        required=False,
        default=2,
        help="logging level [int; 2]",
    )
    return parser.parse_args()


def main():
    args = get_args()

    logger_config = logging_config.defaults
    log_level = logging_config.get_level(args.log_level)
    logging.basicConfig(level=log_level, **logging_config.defaults)

    logger.info(f"{vars(args)}")

    config = args.config
    seed = args.seed
    n_jobs = args.n_jobs
    output = args.output

    pa.set_cpu_count(n_jobs)
    # pa.set_io_thread_count(n_jobs)
    pa.set_io_thread_count(1)

    pipeline = Pipeline(config)
    pipeline.load()

    rng = np.random.default_rng(seed)

    measure_config = pipeline.config.get("measure")
    measure_type = measure_config.get("type")

    dg = ngmix.metacal.DEFAULT_STEP

    colors = pipeline.get_colors()
    color = colors[1]
    dc = (colors[2] - colors[0]) / 2.

    aggregate_path = os.path.join(
        output,
        f"{pipeline.name}_aggregates.feather",
    )
    logger.info(f"reading aggregates from {aggregate_path}")
    aggregates = ft.read_table(
        aggregate_path,
    )
    aggregates.validate(full=True)

    seeds = np.sort(np.unique(aggregates["seed"]))

    results = meas.pivot_aggregates(aggregates)

    dRdc_p, dRdc_m = meas.compute_dRdc(results, dg, dc)
    es, Rs = compute_all(results, dg)
    gs = compute_g_all(es, Rs)
    e_p_c0 = es["plus"]["c0"]
    e_p_c1 = es["plus"]["c1"]
    e_p_c2 = es["plus"]["c2"]
    e_m_c0 = es["minus"]["c0"]
    e_m_c1 = es["minus"]["c1"]
    e_m_c2 = es["minus"]["c2"]
    R_p_c0 = Rs["plus"]["c0"]
    R_p_c1 = Rs["plus"]["c1"]
    R_p_c2 = Rs["plus"]["c2"]
    R_m_c0 = Rs["minus"]["c0"]
    R_m_c1 = Rs["minus"]["c1"]
    R_m_c2 = Rs["minus"]["c2"]

    jobs = []
    for i in tqdm.trange(args.n_resample, ncols=80):
        _seeds = pa.array(rng.choice(seeds, size=len(seeds), replace=True))
        jobs.append(joblib.delayed(meas.pivot_aggregates)(aggregates, seeds=_seeds))

    _results = joblib.Parallel(n_jobs=n_jobs, verbose=10, return_as="generator")(jobs)

    e_p_c0_bootstrap = []
    e_p_c1_bootstrap = []
    e_p_c2_bootstrap = []
    e_m_c0_bootstrap = []
    e_m_c1_bootstrap = []
    e_m_c2_bootstrap = []
    R_p_c0_bootstrap = []
    R_p_c1_bootstrap = []
    R_p_c2_bootstrap = []
    R_m_c0_bootstrap = []
    R_m_c1_bootstrap = []
    R_m_c2_bootstrap = []
    for _res in _results:
        _es, _Rs = compute_all(_res, dg)

        e_p_c0_bootstrap.append(_es["plus"]["c0"])
        e_p_c1_bootstrap.append(_es["plus"]["c1"])
        e_p_c2_bootstrap.append(_es["plus"]["c2"])
        e_m_c0_bootstrap.append(_es["minus"]["c0"])
        e_m_c1_bootstrap.append(_es["minus"]["c1"])
        e_m_c2_bootstrap.append(_es["minus"]["c2"])
        R_p_c0_bootstrap.append(_Rs["plus"]["c0"])
        R_p_c1_bootstrap.append(_Rs["plus"]["c1"])
        R_p_c2_bootstrap.append(_Rs["plus"]["c2"])
        R_m_c0_bootstrap.append(_Rs["minus"]["c0"])
        R_m_c1_bootstrap.append(_Rs["minus"]["c1"])
        R_m_c2_bootstrap.append(_Rs["minus"]["c2"])

    e_p_c0_bootstrap = np.array(e_p_c0_bootstrap)
    e_p_c1_bootstrap = np.array(e_p_c1_bootstrap)
    e_p_c2_bootstrap = np.array(e_p_c2_bootstrap)
    e_m_c0_bootstrap = np.array(e_m_c0_bootstrap)
    e_m_c1_bootstrap = np.array(e_m_c1_bootstrap)
    e_m_c2_bootstrap = np.array(e_m_c2_bootstrap)
    R_p_c0_bootstrap = np.array(R_p_c0_bootstrap)
    R_p_c1_bootstrap = np.array(R_p_c1_bootstrap)
    R_p_c2_bootstrap = np.array(R_p_c2_bootstrap)
    R_m_c0_bootstrap = np.array(R_m_c0_bootstrap)
    R_m_c1_bootstrap = np.array(R_m_c1_bootstrap)
    R_m_c2_bootstrap = np.array(R_m_c2_bootstrap)

    e_p_c0_error = np.nanstd(e_p_c0_bootstrap)
    e_p_c1_error = np.nanstd(e_p_c1_bootstrap)
    e_p_c2_error = np.nanstd(e_p_c2_bootstrap)
    e_m_c0_error = np.nanstd(e_m_c0_bootstrap)
    e_m_c1_error = np.nanstd(e_m_c1_bootstrap)
    e_m_c2_error = np.nanstd(e_m_c2_bootstrap)
    R_p_c0_error = np.nanstd(R_p_c0_bootstrap)
    R_p_c1_error = np.nanstd(R_p_c1_bootstrap)
    R_p_c2_error = np.nanstd(R_p_c2_bootstrap)
    R_m_c0_error = np.nanstd(R_m_c0_bootstrap)
    R_m_c1_error = np.nanstd(R_m_c1_bootstrap)
    R_m_c2_error = np.nanstd(R_m_c2_bootstrap)

    fig, axs = plt.subplots(2, 2)

    axs[0, 0].violinplot(
        [e_p_c0_bootstrap[:, 0] / R_p_c0_bootstrap[:, 0, 0], e_p_c1_bootstrap[:, 0] / R_p_c1_bootstrap[:, 0, 0], e_p_c2_bootstrap[:, 0] / R_p_c2_bootstrap[:, 0, 0]],
        positions=colors,
        widths=0.1,
    )
    axs[0, 0].set_xlabel("$c$")
    axs[0, 0].set_ylabel("$g_1 = R_{11}^{-1} e_1$")
    axs[0, 0].set_title("plus")

    axs[0, 1].violinplot(
        [e_m_c0_bootstrap[:, 0] / R_m_c0_bootstrap[:, 0, 0], e_m_c1_bootstrap[:, 0] / R_m_c1_bootstrap[:, 0, 0], e_m_c2_bootstrap[:, 0] / R_m_c2_bootstrap[:, 0, 0]],
        positions=colors,
        widths=0.1,
    )
    axs[0, 1].set_xlabel("$c$")
    axs[0, 1].set_ylabel("$g_1 = R_{11}^{-1} e_1$")
    axs[0, 1].set_title("minus")

    axs[1, 0].violinplot(
        [R_p_c0_bootstrap[:, 0, 0], R_p_c1_bootstrap[:, 0, 0], R_p_c2_bootstrap[:, 0, 0]],
        positions=colors,
        widths=0.1,
    )
    xs_p = np.linspace(colors[0], colors[-1], 100)
    ys_p = dRdc_p[0, 0] * (xs_p - colors[1]) + R_p_c1[0, 0]
    axs[1, 0].plot(
        xs_p,
        ys_p,
        ls="--",
    )
    axs[1, 0].plot(
        [colors[0], colors[-1]],
        [R_p_c0[0, 0], R_p_c2[0, 0]],
    )
    axs[1, 0].scatter(
        colors,
        [R_p_c0[0, 0], R_p_c1[0, 0], R_p_c2[0, 0]],
    )
    axs[1, 0].set_xlabel("$c$")
    axs[1, 0].set_ylabel("$R_{11}$")
    axs[1, 0].set_title("plus")

    axs[1, 1].violinplot(
        [R_m_c0_bootstrap[:, 0, 0], R_m_c1_bootstrap[:, 0, 0], R_m_c2_bootstrap[:, 0, 0]],
        positions=colors,
        widths=0.1,
    )
    xs_m = np.linspace(colors[0], colors[-1], 100)
    ys_m = dRdc_m[0, 0] * (xs_m - colors[1]) + R_m_c1[0, 0]
    axs[1, 1].plot(
        xs_m,
        ys_m,
        ls="--",
    )
    axs[1, 1].plot(
        [colors[0], colors[-1]],
        [R_m_c0[0, 0], R_m_c2[0, 0]],
    )
    axs[1, 1].scatter(
        colors,
        [R_m_c0[0, 0], R_m_c1[0, 0], R_m_c2[0, 0]],
    )
    axs[1, 1].set_xlabel("$c$")
    axs[1, 1].set_ylabel("$R_{11}$")
    axs[1, 1].set_title("minus")

    plt.show()


if __name__ == "__main__":
    main()
