#!/usr/bin/env python
"""
Staging file for generating simulations and running metadetect
"""

import argparse
import copy
import logging

import yaml
import numpy as np
import matplotlib
import matplotlib.pyplot as plt

import fitsio
import galsim
import galsim_extra

from chromatic_shear_bias import run_utils


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--config",
        type=str,
        required=True,
        help="Metadetection configuration file [yaml]",
    )
    parser.add_argument(
        "--sim",
        type=str,
        required=True,
        help="GalSim configuration file [yaml]",
    )
    parser.add_argument(
        "--output",
        type=str,
        required=False,
        default=None,
        help="Output file [png, pdf]",
    )
    parser.add_argument(
        "--seed",
        type=int,
        required=False,
        default=1,
        help="RNG seed [int]",
    )
    return parser.parse_args()


def get_logger():
    """
    Format logger.
    """
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)
    ch = logging.StreamHandler()
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    return logger


def main():
    """
    Run the simulation and measurement for metadetect noise bias cancellation.
    """
    args = get_args()
    logger = get_logger()

    with open(args.config, "r") as fp:
        config = yaml.safe_load(fp.read())

    # copy the config for safekeeping
    _config = copy.deepcopy(config)

    logger.info(f"Visualizing: {vars(args)}")

    for galsim_config in galsim.config.ReadConfig(args.sim):
        # copy the config for safekeeping
        _galsim_config = copy.deepcopy(galsim_config)

        cosmic_shear = 5 * _config["shear"]["g"]  # we exaggerate the shear for the visualization script
        # TODO Can't make copies after processing inputs due to not being able
        #      to pickle. This means that we'll have a difficult time sharing
        #      our Arrow Dataset across configs, processes, etc. -- how can we
        #      effectively handle this?

        # galsim_config_p, galsim_config_m = run_utils.make_pair_config(_galsim_config, cosmic_shear)
        galsim.config.SetInConfig(galsim_config, "stamp.shear.g1", cosmic_shear)
        mbobs_p = run_utils.observation_builder(
            config,
            galsim_config,
            seed=args.seed,
            logger=logger,
        )
        galsim.config.SetInConfig(galsim_config, "stamp.shear.g1", -cosmic_shear)
        mbobs_m = run_utils.observation_builder(
            config,
            galsim_config,
            seed=args.seed,
            logger=logger,
        )

        for obslist_p, obslist_m in zip(mbobs_p, mbobs_m):
            for obs_p, obs_m in zip(obslist_p, obslist_m):

                fig, axs = plt.subplots(nrows=2, ncols=3)

                axs[0, 0].set_ylabel("$+\gamma$")
                axs[0, 0].imshow(obs_p.image, origin="lower")
                axs[0, 0].set_title("Image")
                axs[0, 1].imshow(obs_p.psf.image, origin="lower")
                axs[0, 1].set_title("PSF")
                axs[0, 2].imshow(obs_p.noise, origin="lower")
                axs[0, 2].set_title("Noise Realization")

                axs[1, 0].set_ylabel("$-\gamma$")
                axs[1, 0].imshow(obs_m.image, origin="lower")
                axs[1, 0].set_title("Image")
                axs[1, 1].imshow(obs_m.psf.image, origin="lower")
                axs[1, 1].set_title("PSF")
                axs[1, 2].imshow(obs_m.noise, origin="lower")
                axs[1, 2].set_title("Noise Realization")

                for ax in axs.ravel():
                    ax.set_xticks([])
                    ax.set_yticks([])

        if args.output is None:
            plt.show()
        else:
            logger.info(f"Writing visualization to disk")
            plt.savefig(args.output)


if __name__ == "__main__":
    main()
